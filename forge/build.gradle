plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "${id}.mixins.json"
        mixinConfig "${id}-forge.mixins.json"
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }

    if (stonecutter.eval(stonecutter.current.project, "<1.18")) {
        implementation.extendsFrom shadow
    }
}

repositories {
    maven { url "https://files.minecraftforge.net/maven/" }
}

dependencies {
    forge "net.minecraftforge:forge:${get("forge")}"

    if (stonecutter.eval(stonecutter.current.project, ">=1.18")) {
        implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
        implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))
    } else {
        shadow(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    }

    modApi "me.shedaniel.cloth:cloth-config-forge:${get("cloth_version")}"

    common(project(path: ":common:$stonecutter.current.project", configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ":common:$stonecutter.current.project", configuration: 'transformProductionForge')
}

processResources {
    def props = [
            "id"              : get("id"),
            "name"            : get("display_name"),
            "description"     : get("description"),
            "author"          : get("author"),
            "license"         : get("license"),
            "repo"            : get("repo"),
            "version"         : project.version,
            "minecraftVersion": stonecutter.current.project,
            "minecraft_min"   : get("minecraft_min"),
            "forgeVersion"    : get("forge"),
            "forge_min"       : get("forge_min"),
            // NOTE: underscore on forge
            "cloth_id"        : stonecutter.eval(stonecutter.current.project, ">=1.18") ? "cloth_config" : "cloth_config2",
            "cloth_min"       : get("cloth_min"),
            "compat_min"      : rootProject.compat_min,
    ]

    inputs.properties props
    filesMatching("META-INF/mods.toml") { expand props }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    if (stonecutter.eval(stonecutter.current.project, "<1.18")) {
        configurations.add(project.configurations.shadow)
        relocate("com.llamalad7.mixinextras", "${maven_group}.mixinextras")
        mergeServiceFiles()
    }
}

remapJar {
    input.set shadowJar.archiveFile
}
