plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${get("neoforge")}"

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-neoforge:${mixin_extras_version}"))

    modApi "me.shedaniel.cloth:cloth-config-neoforge:${get("cloth_version")}"

    common(project(path: ":common:$stonecutter.current.project", configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ":common:$stonecutter.current.project", configuration: 'transformProductionNeoForge')
}

processResources {
    def props = [
            "id"              : get("id"),
            "name"            : get("display_name"),
            "description"     : get("description"),
            "author"          : get("author"),
            "license"         : get("license"),
            "repo"            : get("repo"),
            "version"         : project.version,
            "minecraftVersion": stonecutter.current.project,
            "minecraft_min"   : get("minecraft_min"),
            "neoForgeVersion" : get("neoforge"),
            "neoforge_min"    : get("neoforge_min"),
            // NOTE: underscore on neoforge
            "cloth_id"        : stonecutter.eval(stonecutter.current.project, ">=1.18") ? "cloth_config" : "cloth_config2",
            "cloth_min"       : get("cloth_min"),
            "compat_min"      : rootProject.compat_min,
    ]

    inputs.properties props
    filesMatching("META-INF/neoforge.mods.toml") { expand props }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile

    atAccessWideners.add("${get("id")}.accesswidener")
}
